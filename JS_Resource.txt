JAVASCRIPT:
INTRODUCTION:
	#]javscript is an interpreted programming language and as_well as a scripting language
	#]javascript is dynamicaly typed language (no need to specify the datatype of the value explicitly to be stored)
	#]javascript is case sensitive
interpreted : javascript engine uses interpreter for code conversion

uses of js:
	#] it is used to develop an interactive or dynamic web pages
	#] it is also used for basic client side validation(e.g email validation, debitcard validations, etc..)

JS Engine:
	each and every browser has js_engine
	Browser			JS_Engine
	1] chrome 	 	v8
	2]mozillaFirefox	spider Monkey
	3]ie 			chakra
	4]safari 		javascriptCore

libraries built by using javascript:
	block of optimal code used to perform a specific task 
	30 lines of jsCode and then i had wrapped it into a 3 lines of a single library to perform a task

	1] jQuery 2]loadAsh 3]bootstrap 4] _js  etc...

frameWork:
	collection of libraries
	1] NodeJs: server side programming
 2]ReactJS: one can develop any kind of web applications
 3]ReactNative: develop native mobile applications both in android and IOS
 5] ElectronJS: develop the standalone applucations e.g, calculater , notepad etc..
 6]tensorFlow: ml and ai
 7] AngularJS: single page applications e.g. google maps, gmail etc...

execution of javascript code:
	1] on browser:[ctrl+shift+i] ==> dev_tools tab
			* just open any browser and got to console panel and write js_code and execute it
			* you have to embed your js_code in html

			#how to embed the js_code inside the HTML
				1] inline embed :
					here we will make use of <script></script> tag
				2] external embed
					here we will make use of <script src="path of your .js file"></script> tag

	2] off browser:[NodeJS]   cmd promt node <file path>
		here we will make use of NodeJS

due to unavailability of autocompleteness and intellisense we go for IDE's
we will use vs code as an IDE

IDE ==> integrated development environment 

Tokens:
	the smallest part/unit of the code is called token

javascript tokens are classified into:
1]keywords:
	programmer defined words which had a predefined meaning in it e.g  if, for, while, do while
2]identifiers:
	user defined words user if going to set the value for those words or named memory block
		e.g. var a = 10; a identifier
	rule to use identifier:
		* it can be alfanumeric  var a2 = "hello"
		* it shouldn't start with numeric  2a = "15" ==> false
		* it can start with only special charectors "_" or  "$"   e.g. _a = 25; $a = "message";  viceversa
3]literals:
	the actual values that you are going to store in the memory / datatypes
4]operators: 
	used to perform opperations on oppeerands
	1] arithmatic operators[+, -, *, /, %]
	2] comparision/Relational operators[==(equal), ===(identical), >, <, <=, >=]
	3] bitwise[$, |, ~]
	4] logical[$$, ||, !]
	5] assignment operators[=, +=, -=, *=, /=, %=]
	6] special operators[type(), ternary(?:), in, instenseof, ....]
5]separetors :
	[(), {}, [], ;]

#]how to declare a veriable in javacsript:[var, let, const]
	var x; ===> declaration   let y = 10; const p = "global"
	x  = 5 ==> initialization
	log(x) ===> utilization

	var x = 5;  ===> declaration and initialization

# datatypes:
	* primitive datatype:
		String, number, boolean, undefined, null
	* non premitive/reference type datatype:
		objects, array, functions, 

 flow control statements[if, if else, if else if, switch] and looping statements[for, while, do while]

#]comparision operator
 ==(double equalsto)  ===> check  the value of operands
  ===(triple equalsto)   ====> checks for both value ans as well as datatype of the operands

#functions:  it's a block of code which performs a specific task, mainly developed for reuseability
we can write the functions in different ways:
	1]function declaration:
		syntax:
			function(keyword) name_of_the_function (parameters) {
				//statement block//
			}
			name_of_the_function(arguments)
	2]function expression
	3]immediatly invokable functions[iif]
	4]Arrow function[es6 feature]

#array:
	array in js is used to store multiple values[heterogenious]

	#]how to declare an array in js:
	1] var ar1 = new Array("value1", "value2", .......) //it is not recommended
	2] var arr2 = ["value1", "value2", .......]

To itrate over an array
1]for loop ===> returns the index of an array and doesn't ignores the empty element
2] for of loop ===> returns the element of an array and doesn't ignores the empty element
3] foreach()  method ===> return the element and index of the array and it ignores the empty element
4] for_in loop ==> returns the index of an array and  ignores the empty element

git from command line:

	git init ===>used to initialize an empty repo  (.git)
	git add <fileName>==> to add a specific file from unstaged area to a staged area
	git status ===> used to get the current status of the local repo
	git add .   ===> used to add all the files from unstagd area to staged area
	git rm --cached <fileName> ===> used to remove a specific file from staged area to unstaged area
	git commit -m "commit msg" ====> commitng/saving the changes in staged area
	git remote add <variableName> <url of rempote repo>===> used to assign the url of remote repo to a reference variable
	git push <url_of_global_repo> <branch_name> ===> used to push the code from local repo to global repo
	git branch ===> lists you the branches present in the repo
	git branch <branchName> ===> used to create a new branch in global repo
	git checkout <branchName> ===> used to switch control to specified branch
	git log====> log the commit history
	git config --list===> lists all the configurations of git in your local machine
	
#programm execution in memory:[variable hoisting/ function hoisting]
 * whenever you executed your javascript code, a global execution context(memory) will get created
 * inside the global context global object will get created by name "window"
 * along with window object global variable get created by name "this"
 * in the global levell object and variable are equal i.e, window == this
 * later it will create 2 phases 1] creation_phase 2] execution_phase
 * in creation phase separate memory will be created for the entire code 
	and by default undefined will be assigned as a value for the created memory
 * then in execution phase line by line execution occurs and actual value of the code will be assigned 
	to the memory by overriding the undefined value
#] errors:
	1] RefrenceError: a is not defined [without creating a memory, if you try to access the memory]
	2] RefrenceError: identifier a can't access before initialization [if you try to access let and const veriables before initialization ]
	3] syntaxError : 
			1}a is already been created [if you try to create 2 differenrt memories with same name]
			2} assignment to const veriable[if you try to override the value of const veriable]
	4] TypeError : missing initializer [if you try to declare const vriables without initialization]

#Function execution in memory:
		it is similer to global execution in memory but, whenevr js_engine reads invocation symbol i.e,"()" 
		it is going to create a separate meory called local memory. And in call stack function execution context will be derived on top of global execution contex
		after execution of function, function execution context will be removed/poped from the call stack
	
	
#] callback functions:
	passing a function reference to other function and invocking the same inside the other function is called callback function
#] closure property:
	inner function still having an access on the variable that had been declared in outer funcction
	even after the execution of outer function

#] this keyword:
	the value of this keyword depends on the area where it has beed used or called
	this = window ====> in global levell
	this = object ====> in object levell

#] call(), bind(), apply():
	they are inbuilt methods which can  be used along with the functions using which we can set the value of this keyword

	call(obj_ref, optinalParams(separated by ,))==> it will accept object reference as a parameter and sets the value for this keyword and executes the function
		function barrowing:
				deriving the function from one object to other is called function barrowing
				function barrowing can be achived by call()

	bind(obj_ref, optinalParams(separated by ,))==>it will accept object reference as a parameter and it will create a separate copy of the function
							 sets the value for this keyword and returns the entire function
		function currying:
				it can be achived by bind() method, where we can pass the params in two different stages
	
	apply(obj_ref, array_of_params)===> working of apply() is similer to call() the only difference is it will accepts the params in the form of an array
	
# objects:
	any entity having states/properties and behaviors/values

To declare an object in javascript there are different ways:

1] object literal syntax:
	syntax:
		var obj_refName = {property1:value1,property2:value2}  values can be of any datatype

2] using new Object() keyword
	syntax:
		var obj_refName = new Object()  //declaration
		obj_refName.property_name = value  //initialization

3] using object.create() method ==> it will create an empty object with the prtotype of inheritted object
	syntax:
		var objName = Object.create(obj_ref)
		
	prototype_Object => each and every object in javascript is derived/inherited from the base object called prototype

4] using constructor_function:
	syntax:
		function name_of_function(){
			//declare the properties
		}
	prototype_property of constructor function:
		prototype keyword, it is property each and every javascript object has that property but it is accessed only 
		the object that had been created from the constructor function
		using prototype_property one can modify the constuctor function
	
5] using class(es6 feature):
	syntax:
		class name_obj {
			constructor(){
				//declare variables
			}
		}

note:  	#]__proto__ is used to inherit the properties from one object to another object
	#] javascript fallows prototypel inheritence(every object in javascript is derived from base object i.e, Prototype
	
#] BOM [Browser Object Model]:
	it is platform used to intract with the browser, the default object of browser is Window
	window object it is collection of many objects like (documnet, screen, navigater, history, location)
	using the properties and methods of window object we can interact with browser

	methods of window object:
		alert(), prompt(), confirm(), open(), close(), setTimeout(), setTimeIntervel()
	
	properties:
		innerHeight, innerWidth, outerHeight, outerWidth
objects of window;
#document:

#] history object:
	
	methods of history object:
		back(),  forword(), go()
	properties:
		length //returns the length of history stored

#] screen object:
	properties:
		width, height, availWidth, availheight, ...

#]location object
	properties:
		hash, host, hostName, href, protocol


#] dom:
	it is a platform/medium/interface consists of methods and properties, through which we can access and modify the html structure 

#]events:
	click,dblclick, mouseover, mouseout, resize...
	
#] predefined objects:
	1] array:
		#inbuilt methods:
			1)array.concat(array_params):
    				 Combines two or more arrays. This method returns a new array without modifying any existing arrays.
			2)array.push()
			3)arry.unshift()
			4)array.pop()
			5)array.shift()
			6)array.every()
			7)array.some()
			8)toString():returns a string representation of an array
			9)array.reduse(callback_fxn):
							callbackFunction accepts 4 different parameters (prevoius_value, current_value, currentIndex, array)
							prevoius_value = 0,
							converts the entire array into a single unit(traversing is from left_to_right)
							Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
			10)array.reduseright(callback_fxn):
						every thing works similer ti reduse() but traversing is from right_to_left
			11)array.forEach(callback_fxn):
						callbackFunction accepts 3 different parameters (element, index, array)
						it will just perform the specified action/task by taking each element as an input
			12)array.map(callback_fxn):
						callbackFunction accepts 3 different parameters (element, index, array)
						executes the given statements and returns the result in the form of an array
						using map one can modify the given array
			13)array.filter(callback_fxn):
						callbackFunction accepts 3 different parameters (element, index, array)
						it will return the result in the form of array only the value satisfies the condition
						we can get the elements of an array by using filter(), but one can not modify the array
			14)array.sort():
				sort the given array in ascending order by default
			15)array.revere():
			16)array.slice(startindex, endindex)
			17)array.splice(startindex, deleteCount, [array_of_new_elements_to_be_addeed])
							
	2] string:
	
	3] date:
	4] math:

	
#] ES6 features:[EcmaScript_6 ]:
	ES6 considered as standered enhansement
	
features:
	#] var, let, const
		keyword indentifier = literal
		var a = 5;
	#hoisting:
		* just like var the veriable declared by let, const are not hoisted
		* you can only access let, const veriables only after initialization(else it will throw reference error)
	#block scoping:
		*  veriables declared by var keyword can be accessed anywhere 
		*  veriables declared by let keyword are restricted within the scope i.e, you canot access outside of the block
	
note:
	*Reference Error==> posibelities 
				1] before declaration if you try to access var vriables 
				2] before initialization of let, const veriables if you try to access
	#] template literals:
		log(` ${variable_ref}`)
		
	#] object and array destructuring:
		deriving the properties of an object and element of an array and assigning it to a veriable is called object and array destructuring
	#] spread and rest operator:[...]
		... ==> as rest returns result in the form of an array nd you can use spread reference along with any normal veriable
		... ==> as spread returns the result as elements and you can use spread reference along with array
		
	#] promises:
		promise is similer to the realworld promise, it has 2 status resolve and reject
	syntax:
		
		
	#] arrow function
	#] class
	#] default parameter



webdriverIO :




























	


	